import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.CempjV1Q.js";const t="/img/ca/windowsinstallrootca.png",o=JSON.parse('{"title":"CA","description":"","frontmatter":{},"headers":[],"relativePath":"mics/ca.md","filePath":"mics/ca.md"}'),p={name:"mics/ca.md"};function h(l,s,k,r,d,F){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ca" tabindex="-1">CA <a class="header-anchor" href="#ca" aria-label="Permalink to &quot;CA&quot;">​</a></h1><p>在互联网中，我们常常会通过 TLS 来创建并使用加密 Socket 访问互联网上的资源，这能够有效阻止任何中间人看到两端通信的消息。而在 DN11 的网络架构中，流量可能途径每一个个人，中间人攻击的风险也已依然存在。</p><p>CA 全称为 Certificate Authority，是一个可信任的实体，它通过颁发证书的方式来为网络上所有的用户校验服务器的身份，DN11 也有自己的 CA。</p><h2 id="根证书" tabindex="-1">根证书 <a class="header-anchor" href="#根证书" aria-label="Permalink to &quot;根证书&quot;">​</a></h2><p>DN11 目前有一个 CA —— DN11 CA，DN11 CA 的根证书目前由 Potat0 离线保存，同时，根证书在签发的时候就已经限制了仅能在 <code>.dn11</code> TLD (顶级域名) 下使用，不会影响到 dn11 外的流量，还请放心使用。</p><p>如果您已经接入了 dn11 dns，可以通过 <a href="https://acme.dn11/roots.pem" target="_blank" rel="noreferrer">https://acme.dn11/roots.pem</a> 获取 DN11 根证书，请临时允许不安全的 CA 证书。</p><h3 id="linux-安装" tabindex="-1">Linux 安装 <a class="header-anchor" href="#linux-安装" aria-label="Permalink to &quot;Linux 安装&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://acme.dn11/roots.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roots.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 644</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roots.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roots.pem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/share/ca-certificates/DN11_CA.crt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/share/ca-certificates/DN11_CA.crt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-ca-certificates</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>看到控制台输出 <code>1 added</code> 就说明证书被添加到系统了。</p><h3 id="windows-安装" tabindex="-1">Windows 安装 <a class="header-anchor" href="#windows-安装" aria-label="Permalink to &quot;Windows 安装&quot;">​</a></h3><p>点击链接下载，下载后把后缀名改成 crt 双击安装，如果 windows 提示您选择打开方式，请选择加密外壳扩展。</p><p><img src="`+t+`" alt="windowsinstallroot"></p><p>安装的时候不要让 windows 自动选择证书存储位置，大概率选的是错的，请手动选择<strong>受信任的根证书颁发机构</strong></p><h2 id="acme-签发证书" tabindex="-1">ACME 签发证书 <a class="header-anchor" href="#acme-签发证书" aria-label="Permalink to &quot;ACME 签发证书&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>由于下述签发工具都并非为 DN11 开发，请尽量在 DN11 DNS + DN11 根证书的环境下签发以尽量避免意料之外的问题</p></div><h3 id="certbot" tabindex="-1">certbot <a class="header-anchor" href="#certbot" aria-label="Permalink to &quot;certbot&quot;">​</a></h3><h4 id="dns-01" tabindex="-1">dns-01 <a class="header-anchor" href="#dns-01" aria-label="Permalink to &quot;dns-01&quot;">​</a></h4><p>以手动 DNS 验证为例</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">certbot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> certonly</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">你的域</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --manual</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://acme.dn11/acme/acme/directory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>和一般的 certbot 签发命令没有大的区别，添加 <code>--server</code> 参数即可。</p><h3 id="acme-sh" tabindex="-1">acme.sh <a class="header-anchor" href="#acme-sh" aria-label="Permalink to &quot;acme.sh&quot;">​</a></h3><h4 id="http-01" tabindex="-1">http-01 <a class="header-anchor" href="#http-01" aria-label="Permalink to &quot;http-01&quot;">​</a></h4><p>以 nginx 为例</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">你的域</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://acme.dn11/acme/acme/directory</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>http-01 通过向域名指向的服务器发起一个 HTTP 请求来验证你对这个服务器的所有权。在这个过程中 acme.sh 会修改你的 nginx 配置文件，最终会恢复现场。</p><h4 id="dns-01-1" tabindex="-1">dns-01 <a class="header-anchor" href="#dns-01-1" aria-label="Permalink to &quot;dns-01&quot;">​</a></h4><p>acme.sh 会检查您用于 DNS 校验的 TXT 记录是否生效，但是它不支持指定 DNS 服务器，只支持在少数几个内置的 DNS 服务器中进行选择，这会导致检查 TXT 解析是否生效这一步卡住。幸运的是他有超时控制，超时后会继续执行而不是直接退出，所以只会卡 5 分钟，如果要改变这个行为只能魔改 acme.sh 了。</p><p>当然等五分钟也是没有问题的，下面以 PowerDNS-Admin 为例</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PDNS_Url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;PowerDNS-Admin地址&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PDNS_ServerId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PDNS_Token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;你的token&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PDNS_Ttl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./acme.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --issue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dns</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dns_pdns</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">你的域</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://acme.dn11/acme/acme/directory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>PDNS_ServerId 默认为 localhost，如果有修改也要跟着修改</li><li>PDNS_Token 可以在管理面板的 API Keys 里申请，申请时 Role 选择 User，Domain Access Control 选择对于的域</li></ul><p>等待五六分钟即可，所有的环境变量都会被 acme.sh 保存为配置文件，下次无需重新写环境变量</p><h3 id="caddy" tabindex="-1">caddy <a class="header-anchor" href="#caddy" aria-label="Permalink to &quot;caddy&quot;">​</a></h3><p>如果您有 DN11 内的建站需求，我们推荐您使用 Caddy。</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        acme_ca</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://acme.dn11/acme/acme/directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        acme_ca_root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /etc/caddy/roots.pem</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>请在 Caddyfile 中添加以上内容，并将 acme_ca_root 改为 DN11 根证书路径 caddy 会自动签发证书。</p><p>您也可以把以上配置放在某个站点块中来为某个特定站点添加 DN11 CA 支持。</p><h2 id="搭建-ca-服务" tabindex="-1">搭建 CA 服务 <a class="header-anchor" href="#搭建-ca-服务" aria-label="Permalink to &quot;搭建 CA 服务&quot;">​</a></h2><p>这个章节阐述了目前 DN11 CA ACME 服务的搭建方法，一般不需要二次搭建。</p><h3 id="_1-初始化-step-ca" tabindex="-1">1. 初始化 step-ca <a class="header-anchor" href="#_1-初始化-step-ca" aria-label="Permalink to &quot;1. 初始化 step-ca&quot;">​</a></h3><p>step-ca 提供了很多种安装方式，裸机，docker，k8s 等等。由于计划部署 step-ca 的机器上并没有集群环境，裸机又不方便 remake，通过 docker 镜像安装便成为了最佳选择。</p><p><a href="https://hub.docker.com/r/smallstep/step-ca" target="_blank" rel="noreferrer">https://hub.docker.com/r/smallstep/step-ca</a></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> smallstep/step-ca</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step:/home/step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> smallstep/step-ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --remote-management</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的命令会拉取 step-ca 的镜像，使用 <code>step ca init --remote-management</code> 替换原有的启动命令启动容器同时创建一个名为 step 的卷挂载到 <code>/home/step</code> ，还使用了 <code>-it</code> 参数进入交互式。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> would</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PKI?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.g. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Smallstep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): DN11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DNS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> names</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addresses</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> would</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.g. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ca.smallstep.com[,1.1.1.1,etc.]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): acme.dn11</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.g. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): :443</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> would</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> first</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provisioner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CA?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.g. </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">you@smallstep.com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你的账户名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> What</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> you</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> want</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> be?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [leave </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">empty</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> we&#39;ll generate one]:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在交互式终端中，我们根据他的指引完成配置，其中：</p><ul><li>PKI name 无所谓。</li><li>DNS names 填写我们预先解析过来的域名，后续将使用这个域名访问 ACME 服务</li><li>端口无所谓，后续使用 docker 映射到外部</li><li>first provisioner name 的邮箱可以不存在，但是邮箱域必须在中间证书签发范围内，在本实验中可以使用 <code>abc@acme.dn11</code> ，下面以此为例。</li><li>密码留空让他自己生成</li></ul><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provisioner:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc@acme.dn11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (JWK)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✔</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Super</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subject:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>完成上面的初始化后，终端会告诉你 Admin provisioner 的名称和超级管理的名称，后续我们将使用这两项和上面的 password 来管理 step-ca，务必牢记。</p><p>此外我们还需要手动把密码写入到容器里</p><p>挂载 step 卷并打开容器 shell <code>docker run -it --rm -v step:/home/step smallstep/step-ca sh</code></p><p>将上面生成的密码写入到 <code>secrets/password</code></p><h3 id="_2-启动-step-ca-并配置" tabindex="-1">2. 启动 step ca 并配置 <a class="header-anchor" href="#_2-启动-step-ca-并配置" aria-label="Permalink to &quot;2. 启动 step ca 并配置&quot;">​</a></h3><p>可以初次启动 step ca 了，下面配置一下 admin 账户和证书。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.16.255.2:443:443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step:/home/step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> smallstep/step-ca</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动容器，映射容器内的 443 端口到外部 <code>172.16.255.2:443</code></p><p>启动后使用 <code>docker exec -it &lt;容器ID&gt; /bin/bash</code> 进入容器环境。</p><h4 id="切换-admin-账户到-dn11-域" tabindex="-1">切换 admin 账户到 DN11 域 <a class="header-anchor" href="#切换-admin-账户到-dn11-域" aria-label="Permalink to &quot;切换 admin 账户到 DN11 域&quot;">​</a></h4><p>由于我们手上的根证书只能签发给 dn11 域名，所以需要先把 super admin 的账户名改到 dn11 域，不然后续无法管理只能 remake</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc@acme.dn11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc@acme.dn11</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --super</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>依次输入 step 和你的密码添加一个超级用户</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> step</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>依次输入你的 abc@acme.dn11 和你的密码来删除 step 账户</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你可以用这个命令检查 admin 的删改是否正确</p><h4 id="替换证书" tabindex="-1">替换证书 <a class="header-anchor" href="#替换证书" aria-label="Permalink to &quot;替换证书&quot;">​</a></h4><p>可以使用 vi 把原有的 <code>certs/intermediate_ca.crt</code> <code>certs/root_ca.crt</code> <code>certs/root_ca.crt</code> <code>secrets/intermediate_ca_key</code> 替换为你的中间证书，根证书，中间证书签名秘钥</p><p>注意格式，全部都是 pem 纯文本格式，如果你的格式不对请使用 openssl 转换</p><p><code>secrets/root_ca_key</code> 已经没有用了，删除即可。</p><p>替换完证书后输入 exit 退出 shell。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">容器I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">容器I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>重启容器</p><h3 id="_3-step-ca-远程管理" tabindex="-1">3. step-ca 远程管理 <a class="header-anchor" href="#_3-step-ca-远程管理" aria-label="Permalink to &quot;3. step-ca 远程管理&quot;">​</a></h3><p>我们现在的 step-ca 他位于 docker 内，那我们其实不好每次都 docker exec 进去管理，所以最好能在其他地方管理，至少是宿主机吧。</p><p>其实 step-ca 提供了这样的接口而且我们一开始部署的时候就打开了远程管理。按照 step-ca 的原版教程，我们可以使用 <code>step ca bootstrap</code> 命令创建远程配置文件，但是我并没有创建成功，提示根证书下载失败，这里提供一个手动的安装方法。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .step/certs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .step/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">容器I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/home/step/config/defaults.json</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .step/config/defaults.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">容器I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/home/step/certs/root_ca.crt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .step/certs/root_ca.crt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>先把配置从 docker 里拷贝出来，然后再修改一下 <code>defaults.json</code> 文件。 <code>ca-config</code> 字段可以删除了，root 字段的内容改为刚刚拷贝出来的 <code>root_ca.crt</code> 的绝对路径。</p><p>可以通过列出 provisioner 的方式 <code>step ca provisioner list</code> 检查一下配置文件，列 provisioner 无需鉴权。</p><h3 id="_4-acme-服务配置" tabindex="-1">4. ACME 服务配置 <a class="header-anchor" href="#_4-acme-服务配置" aria-label="Permalink to &quot;4. ACME 服务配置&quot;">​</a></h3><p>下面在 step-ca 上配置 ACME 服务</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provisioner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> acme</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ACME</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">step</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> provisioner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> acme</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --x509-min-dur=20m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --x509-max-dur=8760h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   --x509-default-dur=2160h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的两个命令首先添加了一个名为 acme 类型为 ACME 的 provisioner，然后修改了证书的默认有效期最长有效期和最短有效期</p><p>step-ca 默认的默认有效期为一天，如果正式使用 step-ca 签发的证书那最好换一个比较长的时间。</p><p>上面的命令默认签发为 30 天，最长签发为 365 天，不要签发超过一年的证书，APPLE 公司在新版本的系统中拒绝了签发有效期超过一年的证书，这可能会导致你的证书在 APPLE 的设备上无法使用。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://smallstep.com/docs/step-ca/acme-basics" target="_blank" rel="noreferrer">ACME Basics</a></li><li><a href="https://hub.docker.com/r/smallstep/step-ca" target="_blank" rel="noreferrer">smallstep/step-ca</a></li><li><a href="https://smallstep.com/docs/step-ca/provisioners" target="_blank" rel="noreferrer">Configuring step-ca Provisioners</a></li><li><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noreferrer">acme.sh</a></li></ul>`,85)]))}const g=i(p,[["render",h]]);export{o as __pageData,g as default};
