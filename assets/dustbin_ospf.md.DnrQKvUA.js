import{_ as a,c as i,o as n,a2 as e}from"./chunks/framework.CempjV1Q.js";const l="/img/ospf/add_interface.png",p="/img/ospf/config_interface.jpeg",b=JSON.parse('{"title":"OSPF(过期) 2023年6月","description":"","frontmatter":{},"headers":[],"relativePath":"dustbin/ospf.md","filePath":"dustbin/ospf.md"}'),r={name:"dustbin/ospf.md"};function t(h,s,d,c,o,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="ospf-过期-2023年6月" tabindex="-1">OSPF (过期) 2023 年 6 月 <a class="header-anchor" href="#ospf-过期-2023年6月" aria-label="Permalink to &quot;OSPF(过期) 2023年6月&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>建 dn11 的时候遇到了一些小问题，在 fullmesh 的网络拓扑的情况下偶尔会出现几个节点连不上的情况，连不上了就直接连不上了，没有后话了。</p><p>实际上是可以通过绕路的方式连通的，这就要引入一些路由协议了，最早的构想是引入 BGP 协议的但是考虑了一下觉得这些东西的体量还是太大了，最后决定引入 OSPF 协议。</p><p>下面将在 openwrt 上使用 bird2 配置 OSPF over WireGuard。</p><h2 id="ospf-配置" tabindex="-1">OSPF 配置 <a class="header-anchor" href="#ospf-配置" aria-label="Permalink to &quot;OSPF 配置&quot;">​</a></h2><p>作为示例，本文选择 bird2 提供 OSPF 支持，先安装 bird2</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bird2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> birc2c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 openwrt 上，bird2 的配置文件默认地址在 <code>/etc/bird.conf</code></p><p>bird2 的默认配置文件很长，算是一个 all config 先给他放到一边去</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/bird.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/bird.conf.bak</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后我们新建一个自己的 bird.conf</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/bird.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>给各位准备了配置文件模板，粘贴进去再改改就好了</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> syslog </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> protocols </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172.16.255.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">device{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protocol kernel{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ipv4 {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        export where proto = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ospf v2 wg {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ipv4 {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        export </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> where net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 172.16.4.0/24;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    area</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wg*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            cost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    area</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;br-lan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ul><li>每个路由设备的 <code>route id</code> 都是唯一的， <code>route id</code> 本质上是一个 int32, 只是为了方便使用被 <code>.</code> 分割成了四段，需要提前约定。一般来说为了方便记忆和配置，会取了一个网段将这个网段下的 ip 对应的 int 作为 <code>route id</code> ，dn11 对于 <code>route id</code> 有规范，起始 id 为 <code>172.16.255.1</code> ，请在文档中按顺序往下申请</li><li><code>import where net !~ 172.16.4.0/24;</code> 这一行指定的网段的路由不会从 ospf 中学习，一般需要把这里配置成你的 lan 的网段，因为 lan 的路由早已由系统定义，不需要也不能由 ospf 来指定</li><li><code>export all;</code> 这一行指定了由 ospf 导出给其他路由学习的网段，如果你由 ospf 管理的接口中有不愿意导出的网段可以修改这里，这里导出全部</li><li>后面紧跟着两个 area，每个 area 也有自己的 id，这两个 id 和 route id 一样仅仅是一个 int32 并不代表任何网络含义，仅仅是个名字， <code>0.0.0.0</code> 是骨干 area ，在这里必须统一使用 <code>area 0.0.0.0</code></li><li>在下一行我们用 <code>interface &quot;wg*&quot;</code> 指定了一些接口，这里的 <code>*</code> 是通配符，这种写法指定了所有名字以 wg 开头的接口在这个 area 内，后续建立 wg 接口的时候要遵循这里的配置，如果你想使用其他名称也可以修改这里的配置</li><li>在下一行，指定了一个 <code>cost</code> ，事实上即使不配置 <code>cost</code> ospf 也会自动地指定一个 cost，cost 默认的值为 100Mbps / 连接速度</li><li><code>area 0.0.0.4</code> 用于你的 lan, dn11 目前定义每个人的 lan 都单独占用一个 area， 因此，需要一个唯一的 area 用于 lan, 请在文档中申请</li><li>下一行的 interface 里指定了 lan 接口，对于 openwrt 旁路由，这里一般就是 br-lan，主路由一般就是 lan</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>需要在文档中申请的有 route id 和 area id</p></div><p>编辑完配置文件后，就可以启动 bird2 了</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bird</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="wireguard-配置" tabindex="-1">WireGuard 配置 <a class="header-anchor" href="#wireguard-配置" aria-label="Permalink to &quot;WireGuard 配置&quot;">​</a></h2><p>下面建立 WireGuard 点对点连接，均在 openwrt 的 web 页面里操作</p><p>在要建立 WireGuard 连接的两个路由上要进行相对应的操作，操作的流程一致</p><h3 id="新建接口" tabindex="-1">新建接口 <a class="header-anchor" href="#新建接口" aria-label="Permalink to &quot;新建接口&quot;">​</a></h3><p>在 <code>网络-接口-添加新接口...</code> 中新建一个 WireGuard 接口，以 <code>wg*</code> 的格式命名，作为示例，这里新建一个 <code>wg0</code><img src="`+l+'" alt="add_interface"></p><h3 id="配置-wireguard-接口" tabindex="-1">配置 WireGuard 接口 <a class="header-anchor" href="#配置-wireguard-接口" aria-label="Permalink to &quot;配置 WireGuard 接口&quot;">​</a></h3><ul><li>私钥填写你自己的私钥，如果没有，可以使用 <code>wg genkey</code> 命令生成一个</li><li>监听端口最好使用一个比较高的端口，可以随意指定，但是不同的 WireGuard 接口监听的端口不能重复</li><li>IP 地址是 WireGuard 隧道中你的 IP 地址，dn11 对 WireGuard 隧道地址有规范，起始地址为 <code>172.16.128.0</code> ，每个人每次可以在文档中申请一个 /28 的网段，而每次使用一个 /32，例如 <code>172.16.128.16/32</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>记住这个值，在配置静态路由时会使用，也需要交换给对方</p></div><p>先保存上述配置，点击 <code>连接</code> 重连该 WireGuard 接口，此时接口公钥可以在 <code>状态-WireGuard状态</code> 里获取，下面继续配置这个接口，先添加一个 peer</p><ul><li>公钥是建立点对点 WireGuard 连接的对方的公钥，对方在完成上述配置后就能获取到接口公钥，将对方的公钥填写在这里</li><li>允许的 IP 填写 <code>0.0.0.0/0</code> 让 WireGuard 放通所有流量（如果你真的不想填这个，可以填你要访问的网段和组播地址，不推荐）</li><li>路由允许的 IP 不要勾选，路由将由 OSPF 管理，不要让 WireGuard 来配置路由</li><li>端点主机填对方主机地址，请事先配置好 DDNS</li><li>端点端口填对方的 WireGuard 监听地址</li><li>持续 Keep-Alive 仅当你的路由位于 nat 后，对方无法直连时勾选<div class="info custom-block"><p class="custom-block-title">INFO</p><p>实际上 OSPF 的组播包和路由交换会产生流量，一点程度会起到和 Keep-Alive 类似的作用</p></div></li></ul><p>配置完成后保存</p><p><img src="'+p+`" alt="config_interface"></p><h3 id="配置防火墙" tabindex="-1">配置防火墙 <a class="header-anchor" href="#配置防火墙" aria-label="Permalink to &quot;配置防火墙&quot;">​</a></h3><p>对于 dn11 老成员，只需将这个新建的 WireGuard 接口分配到原先用于 WireGuard 的防火墙区域即可，然后就可以跳过这一步</p><p>没有配置过的话需要在 WireGuard 接口的配置中修改防火墙设置为 “不指定或新建”，然后填写新的防火墙区域名称，保存配置，以创建一个新的防火墙区域</p><p>接下来转到 <code>网络-防火墙</code> ，配置新建的防火墙区域。基本设置中，入站出站转发均改为接受，端口触发中，lan 到 WireGuard 接口和 WireGuard 接口到 lan 的转发均改为接受，保存并应用</p><h3 id="配置静态路由" tabindex="-1">配置静态路由 <a class="header-anchor" href="#配置静态路由" aria-label="Permalink to &quot;配置静态路由&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">Why?</p><p>由于没有让 WireGuard 配置路由，在隧道 IP 地址中又选取了 /32 的网段，对端隧道 IP 和自己并不在一个子网，以至于没有到对面的隧道地址的路由，这才需要手动配置静态路由。</p></div><p>在 <code>/etc/bird.conf</code> 里的 <code>static</code> 协议里静态路由配置，示例如下：</p><div class="language-nginx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ipv4 {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        import </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> none;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 172.16.128.2/32 via </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wg0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><code>172.16.128.2/32</code> 应填写对端隧道 IP/32</li><li><code>wg0</code> 应该填写为隧道网卡名称</li></ul><p>这些配置在 static 协议里指定了到对端隧道 IP 的路由，然后将这些路由从 static 协议里 import 到 bird</p><p>现在恭喜你完成了所有配置，没有意外的话稍等片刻应该就能访问到对面的网络了</p><p>如果仍然无法访问请转到<a href="#故障排查">故障排查</a></p><h2 id="连接到更多路由" tabindex="-1">连接到更多路由 <a class="header-anchor" href="#连接到更多路由" aria-label="Permalink to &quot;连接到更多路由&quot;">​</a></h2><p>对每一个连接都需要一个独立的 WireGuard 接口，每个接口都会存在于一个独立的 WireGuard 子网。因此需要新建一个 WireGuard 接口来连接到第二个路由（比如说 wg1 ）</p><ol><li><p>配置 WireGuard</p><p>与配置第一个 WireGuard 接口无异，注意监听端口和 IP 地址不能和其他接口重复</p></li><li><p>配置静态路由</p><p>与配置第一个静态路由无异，注意网关和目标地址不能和前一个重复，且与 WireGuard 配置里的 IP 保持一致</p></li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>1. 仔细检查端口是否重复</p><p>2. 不要忘了在配置完成后重连接口</p></div><h2 id="故障排查" tabindex="-1">故障排查 <a class="header-anchor" href="#故障排查" aria-label="Permalink to &quot;故障排查&quot;">​</a></h2><h3 id="排查步骤" tabindex="-1">排查步骤 <a class="header-anchor" href="#排查步骤" aria-label="Permalink to &quot;排查步骤&quot;">​</a></h3><ol><li>检查 WireGuard 连接是否连上，查看 “状态 - WireGuard 状态” 中对应接口的对端是否成功握手，图标是否亮起，如果没有说明 <a href="#wireguard-配置">WireGuard</a> 有问题</li><li>检查 OSPF 是否连上，查看 “状态 - 系统日志”，拉到最新，如果 OSPF 卡在 Init 状态，说明<a href="#配置静态路由">静态路由</a>配置有问题</li><li>上面两项都过了之后应该能 ping 通对面的路由，否则就是疑难杂症</li><li>能 ping 通对面路由但是 ping 不通对面 lan 的主机，转到<a href="#配置防火墙">配置防火墙</a></li></ol><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><ul><li><p>Q: 没有公网 IPv4 能不能用 IPv6</p><p>A: 可以，两边端点主机的 DDNS 都要做 AAAA 解析，不要上 A 解析，其他配置依然使用 IPv4</p></li></ul><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://www.procustodibus.com/blog/2021/10/ha-wireguard-site-to-site/" target="_blank" rel="noreferrer">HIGH AVAILABILITY WIREGUARD SITE TO SITE</a></li><li><a href="https://www.procustodibus.com/blog/2020/12/wireguard-site-to-site-config/" target="_blank" rel="noreferrer">WIREGUARD SITE TO SITE CONFIGURATION</a></li></ul>`,54)]))}const E=a(r,[["render",t]]);export{b as __pageData,E as default};
