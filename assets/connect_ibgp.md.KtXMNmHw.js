import{_ as a,c as i,o as n,a2 as p}from"./chunks/framework.CempjV1Q.js";const c=JSON.parse('{"title":"IBGP","description":"","frontmatter":{},"headers":[],"relativePath":"connect/ibgp.md","filePath":"connect/ibgp.md"}'),l={name:"connect/ibgp.md"};function e(h,s,t,k,r,d){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="ibgp" tabindex="-1">IBGP <a class="header-anchor" href="#ibgp" aria-label="Permalink to &quot;IBGP&quot;">​</a></h1><p>原文链接: <a href="https://baimeow.cn/posts/dn11/configureibgp/" target="_blank" rel="noreferrer">IBGP FullMesh 实现多节点自治域</a></p><p>最近不少群友有把自己的其他服务器也接入自己的 AS 的需求，那这篇教程也是时候该出了。</p><h2 id="总览" tabindex="-1">总览 <a class="header-anchor" href="#总览" aria-label="Permalink to &quot;总览&quot;">​</a></h2><p>这个事情比较复杂，我们先不急着开始配，先了解一下我们需要一个什么效果。</p><p>DN11 作为一个发展了有一段时间的实验性网络，我们目前有很大一批人，他们手上都已经有了一个节点，并且在这个节点上配置了 BGP 从而联通到其他节点。那这个情景下，他们的自治域就是由那一个节点组成的单节点自治域。我们现在需要添加一个新的节点到这个自治域，我们需要解决两个问题。</p><ol><li>这两个节点之间需要组网</li><li>需要把某一个节点获取到的 BGP 路由与其他节点做一个同步</li></ol><p>这两件事情我们分别将通过 OSPF 和 IBGP 实现。OSPF 是 DN11 的老东西，从使用者的角度看，就一个通过获取全局拓扑计算最短路的路由协议。IBGP 是 BGP 的一种，BGP 协议分为两种 EBGP 和 IBGP, 他们分别用于将 BGP 路由发给其他 AS 和将 BGP 路由同步到自己 AS 的其他节点。</p><p>IBGP 需要配置 fullmesh，这是由他的设计决定的，IBGP 只会把自己收到的 EBGP 路由转发给自己的邻居，对于自己收到的 IBGP 路由他并不会做一个转发，这主要是为了防止产生环。这其实无所谓，节点多了我们可以用 rr 反射器甚至多级 rr，还可以玩联邦，这个日后再说。下面将以双节点为例，配置一个多节点的 AS。</p><h2 id="入口文件" tabindex="-1">入口文件 <a class="header-anchor" href="#入口文件" aria-label="Permalink to &quot;入口文件&quot;">​</a></h2><p>由于这次的配置文件比较长，我们会把他切分到各个文件中，所以先介绍一下入口文件 <code>bird.conf</code> 的配置</p><div class="language-bird vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bird</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log syslog </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">debug protocols </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">router id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> kernel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ipv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ipv4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OSPF_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ipv4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_table;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/etc/bird/ospf.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/etc/bird/bgp.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/etc/bird/ibgp.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pipe_ospf_table{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master4;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    peer table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OSPF_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        krt_prefsrc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172.16.4.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pipe_bgp_table {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master4;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    peer table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RTS_BGP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> then </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        krt_prefsrc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172.16.4.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>我们很容易会发现，入口文件这里使用了三个 <code>include</code> 关键字，我们在这个入口文件里分别引用了三个文件，后续我们的 OSPF IBGP 和 EBGP 的实际逻辑都会在里面去实现。</p><p>需要注意的时候，bird 的配置文件是有序的，从上面的配置文件中可以看出来，在我们 include 之前，我们声明了两张路由表。如果我们调换一下位置，bird 就会报错说这个 symbol 是未定义的。当然你也可以把这几个表的声明给放到相应的文件内，这是没有问题的，bird 本身不存在作用域问题。我这里放在入口文件是为了入口文件本身能够逻辑自洽，也是为了整体看上去比较清真。</p><p>后面两个 pipe 分别是为了导入 ospf 路由和 bgp 路由到 master4, master4 表的路由最终在 kernel 协议里导入到系统表。这里给 BGP_table 加了 filter 是为了防止用于静态宣告的 Static 路由进入系统表。</p><h2 id="铺设-ospf" tabindex="-1">铺设 OSPF <a class="header-anchor" href="#铺设-ospf" aria-label="Permalink to &quot;铺设 OSPF&quot;">​</a></h2><p>理论上讲保证自治域内部的通畅是一个自治域的基本要求，一般需要先把自己配通了再去想着和其他人 peer。所以确保自己内网的通畅是第一步。我们下面使用 OSPF 来确保 AS 内部的连通性</p><div class="language-bird vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bird</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ospf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v2 selfnet {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ipv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OSPF_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        area</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wg0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        cost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ptp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # may change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                interface</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcast;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>OSPF 的教程前面有一篇文章讲解过了。这里我们在回环口 lo 配置了 bcast 是为了将回环口的 ip 广播到 OSPF，不用担心 127.0.0.1 这个 IP 进路由表，bird 自己会过滤掉，也可以手动写 filter 过滤，这样显式一点。</p><p>对于这个 bcast，如果你想把这台机器的内网广播到 OSPF 的话，把 lo 改成 br-lan 这种 lan 的接口名就可以了，此时你的路由设备在 OSPF 的 IP 就是你 br-lan 接口上的 IP；如果你是云服务器，下面压根没有子网，这种时候建议手动在 lo 接口配置一个 ip 并通过广播 lo 接口的 ip 的方式把你的设备广播在你的 OSPF 里。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>为了让这个添加到 lo 的 ip 永久生效，你需要看看你的系统下的网络是怎么管理的，下面展示一下 netplan 的配置。</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /etc/netplan/70-lo.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ethernets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      addresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">172.16.4.6/32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>以上是我的一台机器 lo 接口的的 netplan 配置，这里绑定了 172.16.4.6/32 到 lo 接口上，广播出去后就可以使用这个 IP 访问我的这台设备。</p><p>配置好要广播的 IP 后你需要在另一台机器上做相同的操作，然后拉隧道并添加你的隧道到 ospf 的配置文件，就像上面的 wg0 一样。</p><p>ospf 的 cost 随你喜欢，我个人一般综合判断带宽和延时决定大概给多少 cost。下面给出一个标准 WireGuard 隧道配置样例。</p><p><strong>yourIP 最好另起隧道 ip（即不要和 lo 上面的 ip 冲突）</strong></p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Interface]</span></span>
<span class="line"><span>ListenPort = &lt;listenPort&gt;</span></span>
<span class="line"><span>PrivateKey = &lt;privateKey&gt;</span></span>
<span class="line"><span>PostUp = /sbin/ip addr add dev %i &lt;yourIP&gt;/32 peer &lt;peerIP&gt;/32</span></span>
<span class="line"><span>Table = off</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Peer]</span></span>
<span class="line"><span>PublicKey = &lt;publicKey&gt;</span></span>
<span class="line"><span>AllowedIPs = 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16</span></span>
<span class="line"><span>Endpoint = &lt;endpoint&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意，如果你像上面一样使用 PostUp 来给接口绑定 IP，那么请务必删除掉 Address 字段。否则 OSPF 会认为你有两个 IP（其实这个两个 IP 是一样的，但是 network 不一样）并在这个接口上使用这两个一样的 IP 分别做一次广播，结果会导致对端混乱，无法建立 OSPF 邻居。</p><p>如果你在调试 bird 的时候发现日志里有提到 MTU 问题，请添加 <code>MTU = 1420</code> 在两边的 <code>[Interface]</code> 下。还是有问题的话尝试继续减小 MTU。</p><p>如果两边网络配通了那说明你的 AS 内部已经通了，可以进行下一步配置了。</p><h2 id="ebgp-静态宣告" tabindex="-1">EBGP 静态宣告 <a class="header-anchor" href="#ebgp-静态宣告" aria-label="Permalink to &quot;EBGP 静态宣告&quot;">​</a></h2><p>一个 AS 所拥有的网段基本是固定的，只需要宣告固定的网段就好了，这里推荐使用静态宣告。当然你也可以把 OSPF 重分发出来，但是重分发很容易重分发出一些内部的隧道段出来，也会让漏油的风险 ++，个人不推荐这个配法。不过他也有一个好处，就是即使你 AS 内部炸了，你依然有可能可以绕路其他的 AS 访问到裂开的另一块。但这不清真，一般来说 <strong>保证自己的 AS 内部的连通性是 AS 自身的义务</strong> 。</p><div class="language-bird vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bird</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ipv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    route</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.0/24</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bgp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_peers {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.253</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4220084444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ipv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RTS_STATIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RTS_BGP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] then </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bgp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hakuya_tokyo_aws </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_peers {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    neighbor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100.64.0.253</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hakuya-aws&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4220081919</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>和之前的配法没有什么差别，就是一个静态宣告，不再做讲解。</p><blockquote><p>在边缘节点上，和其他人 EBGP peer 时，你可以只宣告那个节点自己所拥有的网段，从而减少途径那个节点的流量。</p></blockquote><h2 id="ibgp-内部通告" tabindex="-1">IBGP 内部通告 <a class="header-anchor" href="#ibgp-内部通告" aria-label="Permalink to &quot;IBGP 内部通告&quot;">​</a></h2><p>上面配好之后如果你先注释掉 IBGP 的配置文件的 include，你会发现你和别人起 EBGP 的那台设备一切正常，而另一台机器只有 OSPF 的路由，缺少到其他 AS 的路由，这便是 IBGP 想要解决的问题。我们通过 IBGP 来同步 AS 不同边界网关获取到的外部 EBGP 路由。下面先给出配置样例：</p><div class="language-bird vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bird</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bgp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ibgp_peers {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4220084444</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    source address</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ipv4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        next hop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        igp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OSPF_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BGP_table;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RTS_STATIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> then </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># change it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bgp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IBGP_dorm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ibgp_peers {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    neighbor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.16.4.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> internal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>其实和 EBGP 非常相似，前面的 <code>local</code> 和 <code>source address</code> 和 EBGP 保持一致。</p><p>在 ipv4 块，我们添加了一句 <code>next hop self</code> 也就是设置自己为下一跳网关，由于 AS 内部的 OSPF 已经跑通了，所以设为自己的递归路由一下就可以通过 OSPF 的表找到下一跳网关的位置。下面紧接着的 <code>igp table OSPF_table</code> 就是对于接收到的 IBGP 路由 bird 去搜索递归路由用的路由表，我们给他设置为我们 OSPF 的表。</p><p>至于为什么这里突然提到了递归路由，这是因为我们把路由通过 IBGP 通告到了我们的 AS 内部后其实这个路由的网关往往并不能直接路由得到。当我们收到一个 IBGP 路由后我们需要根据 OSPF 表做递归路由从而决定真正的下一跳地址。</p><p>再往后我们在 <code>export</code> 里做了一个过滤拒绝了 Static 路由，这是因为我们静态宣告自己的网段是 Static 路由做的。而 IBGP 从设计上来说，并不适用于传递这些信息，更何况对于内部而言这是错误的，因此这里做一个过滤。</p><p>最后我们依旧和使用 EBGP 一样，根据上面的模板定义一个新的 IBGP 连接，不同的是现在不需要指定接口，IBGP 的 peer 默认是 multihop 的，他会自己根据路由表路由过去，最终连上就可以了，后面标识 internal 表示这是一个 IBGP。</p><h2 id="继续增加节点" tabindex="-1">继续增加节点 <a class="header-anchor" href="#继续增加节点" aria-label="Permalink to &quot;继续增加节点&quot;">​</a></h2><p>这里涉及三个协议，OSPF IBGP EBGP。对于 OSPF 增加节点只要有一条隧道通上就好了，不过我还是建议有条件的做 fullmesh，这会大幅度提升你的网络稳定性。EBGP 照样配就是，尽可能就近 peer。而 IBGP，你每增加一个节点，这个节点要和现存的所有节点 peer，也就是说 IBGP 需要 fullmesh。这是因为 IBGP 只会发自己的路由给邻居，而不转发不属于自己的路由，这个设计在上面介绍过了。</p><p>所以如果节点数量上来了，就需要其他方案辅助了。</p><h2 id="疑难解答" tabindex="-1">疑难解答 <a class="header-anchor" href="#疑难解答" aria-label="Permalink to &quot;疑难解答&quot;">​</a></h2><h3 id="一堆-unreachable" tabindex="-1">一堆 unreachable <a class="header-anchor" href="#一堆-unreachable" aria-label="Permalink to &quot;一堆 unreachable&quot;">​</a></h3><p>检查 igp table 配了没，检查 ospf 路由表是否正确。</p><h3 id="ospf-没连上" tabindex="-1">OSPF 没连上 <a class="header-anchor" href="#ospf-没连上" aria-label="Permalink to &quot;OSPF 没连上&quot;">​</a></h3><p><code>ip addr</code> 看看你的 wg 接口绑定了几个 IP 上去，多于一个那就 remake WireGuard 配置文件。如果你在 PostUp 里绑 IP 了那就不要 Address 字段了。</p><p>也有可能是 MTU 问题，看看 bird 日志 <code>journalctl -xeu bird</code> ，用 op 的看 web。</p>`,53)]))}const b=a(l,[["render",e]]);export{c as __pageData,b as default};
